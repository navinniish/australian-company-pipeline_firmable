version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: australian_companies_db
    environment:
      POSTGRES_DB: australian_companies
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../sql/ddl:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - company_pipeline
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: australian_companies_redis
    ports:
      - "6379:6379"
    networks:
      - company_pipeline
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # ETL Pipeline Service
  etl_pipeline:
    build:
      context: ..
      dockerfile: docker/Dockerfile.pipeline
    container_name: australian_companies_etl
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=australian_companies
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - company_pipeline
    restart: unless-stopped

  # dbt for data transformations
  dbt:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dbt
    container_name: australian_companies_dbt
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=australian_companies
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres_password}
    volumes:
      - ../dbt:/app/dbt
      - dbt_profiles:/root/.dbt
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - company_pipeline
    command: ["tail", "-f", "/dev/null"]  # Keep container running

  # FastAPI web service (optional - for API access)
  web_api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: australian_companies_api
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=australian_companies
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-postgres_password}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - company_pipeline
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: australian_companies_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - company_pipeline
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: australian_companies_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - company_pipeline
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  dbt_profiles:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  company_pipeline:
    driver: bridge